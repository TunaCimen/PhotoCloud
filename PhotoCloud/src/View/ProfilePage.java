package View;

import Controller.UIController;
import Controller.command.*;
import Model.db.PostDatabase;
import Model.db.UserDatabase;
import Model.nodes.Post;
import Model.nodes.User;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.stream.Collectors;

import Image.*;


public class ProfilePage implements Page, MouseListener {
    private JPanel mainPanel;
    private JPanel northPanel;
    private JPanel southPanel;
    private JLabel nicknameLabel;
    private JLabel photoLabel;
    private JLabel nameLabel;
    private JLabel surnameLabel;
    private JLabel tierLabel;

    private User user = null;


    ProfileFeed pf;

    public ProfilePage() {
        southPanel.setLayout(new GridBagLayout());
        northPanel.setPreferredSize(new Dimension(500, 120));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;

        nameLabel.addMouseListener(this);
        surnameLabel.addMouseListener(this);
        photoLabel.addMouseListener(this);
        pf = new ProfileFeed();
        southPanel.add(pf.returnMainPanel(), gbc);

    }


    public void repaintFeed() {
        pf.repaintView();
    }

    @Override
    public void onStart() {
        if (user == null) user = UIController.getUIController().getCurrentUser();
        //user = UIController.getUIController().getCurrentUser();
        nicknameLabel.setText("nickname: " + user.getNickname());
        nameLabel.setText("name: " + user.getName());
        surnameLabel.setText("surname: " + user.getSurname());
        tierLabel.setText(user.tier.getVal() + " Tier User");
        pf.repaintView();
        if (user.doesHavePP()) {
            photoLabel.setIcon(new ImageIcon((BufferedImage) user.getProfilePic()));
            photoLabel.setText("");
        } else {
            photoLabel.setText("No PP set");
        }

        //TODO:photolabel vs.

    }

    public void setUser(User u) {
        user = u;
    }


    @Override
    public void onExit() {
        nameLabel.setText("");
        //photoLabel.setIcon(null);
        surnameLabel.setText("");
        nicknameLabel.setText("");
        user = null;
    }


    @Override
    public JPanel getPanel() {
        return mainPanel;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        northPanel = new JPanel();
        northPanel.setLayout(new GridBagLayout());
        mainPanel.add(northPanel, BorderLayout.NORTH);
        nicknameLabel = new JLabel();
        nicknameLabel.setText("nickname:");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        northPanel.add(nicknameLabel, gbc);
        nameLabel = new JLabel();
        nameLabel.setText("name:");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        northPanel.add(nameLabel, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        northPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        northPanel.add(spacer2, gbc);
        photoLabel = new JLabel();
        photoLabel.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        northPanel.add(photoLabel, gbc);
        surnameLabel = new JLabel();
        surnameLabel.setText("surname:");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        northPanel.add(surnameLabel, gbc);
        tierLabel = new JLabel();
        tierLabel.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        northPanel.add(tierLabel, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        northPanel.add(spacer3, gbc);
        southPanel = new JPanel();
        southPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.add(southPanel, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() instanceof JLabel labelClicked) {

            if (labelClicked == nameLabel) {
                ReturnCommand<String> c = new ChangeFieldCommand(getPanel(), "Enter New:");
                String newField = c.executeWithReturn();
                if (!newField.equals("")) {
                    System.out.println(newField);
                    UserDatabase
                            .getInstance()
                            .searchByNickname(user.getNickname()).setName(newField);
                    onStart();
                }
            } else if (labelClicked == surnameLabel) {
                ReturnCommand<String> c = new ChangeFieldCommand(getPanel(), "Enter New:");
                String newField = c.executeWithReturn();
                if (!newField.equals("")) {
                    System.out.println(newField);
                    UserDatabase
                            .getInstance()
                            .searchByNickname(user.getNickname()).setSurname(newField);
                    onStart();
                }

            } else if (labelClicked == photoLabel) {
                System.out.println("Doch der abeeeeend ");
                ChoosePhotoCommand choosePhotoCommand = new ChoosePhotoCommand(100, 100);
                ImageIcon icon = choosePhotoCommand.executeWithReturn();
                BufferedImage r = (BufferedImage) ImageSecretary.convertImageToRenderedImage(icon.getImage());
                user.setProfilePic(new ImageMatrix(r));
                onStart();
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    public class ProfileFeed extends RecycleView<PostHolder> {
        List<Post> posts;


        public ProfileFeed() {
            super();

        }

        @Override
        void extendsRepaint() {

            posts = PostDatabase.getInstance().getByUser(user).stream().filter(e -> !e.isPrivate).collect(Collectors.toList());
        }

        @Override
        PostHolder onCreateHolder() {

            return new PostHolder(southPanel);
        }

        @Override
        int getItemCount() {
            return posts.size();
        }


        @Override
        void onBindHolder(ViewHolder panel, int position) {
            PostHolder p = (PostHolder) panel;
            ((PostHolder) panel).p = posts.get(position);
            if (!user.equals(UIController.getUIController().getCurrentUser())) {
                p.deleteButton.setVisible(false);
                p.options.setVisible(false);
            }
            if (UIController.getUIController().getCurrentUser().tier == User.tiers.Admin) {
                p.deleteButton.setVisible(true);
            }
            ImageIcon icon = new ImageIcon((BufferedImage) posts.get(position).getImage());
            Image image = icon.getImage();
            int maxWidth = 90;
            int maxHeight = 90;
            Image scaledImage = image.getScaledInstance(maxWidth, maxHeight, Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            p.photoLabel.setIcon(scaledIcon);
            p.descLabel.setText(posts.get(position).description);
        }
    }


    private static class PostHolder extends ViewHolder implements ActionListener {
        JLabel descLabel;
        JLabel photoLabel;

        JButton deleteButton;
        JButton commentButton;

        final String isPublicComboItem;
        final String isPrivateComboItem;

        public Post p;

        JComboBox<String> options;

        public PostHolder(JPanel binding) {
            super(binding);
            isPrivateComboItem = "Private";
            isPublicComboItem = "Public";
            deleteButton = new JButton("Delete");
            deleteButton.addActionListener(this);
            commentButton = new JButton("Comments");
            String[] items = {isPublicComboItem, isPrivateComboItem};
            options = new JComboBox<>(items);
            options.addActionListener(this);
            addComponents();
        }


        @Override
        public void addComponents() {
            viewHolder.setLayout(new BoxLayout(viewHolder, BoxLayout.X_AXIS));
            photoLabel = new JLabel();
            descLabel = new JLabel();
            options.setMaximumSize(new Dimension(100, 50));
            viewHolder.add(Box.createHorizontalStrut(5));
            viewHolder.add(photoLabel);
            viewHolder.add(Box.createHorizontalStrut(5));
            viewHolder.add(descLabel);
            viewHolder.add(Box.createHorizontalStrut(5));
            viewHolder.add(options);
            viewHolder.add(Box.createHorizontalStrut(5));
            viewHolder.add(deleteButton);

        }

        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("Changed the sattus of the combobox");
            if (e.getSource() == options) {
                switch ((String) options.getSelectedItem()) {
                    case "Public" -> p.isPrivate = false;
                    case "Private" -> {
                        p.isPrivate = true;
                        System.out.println("to private");
                    }


                }
            }
            if (e.getSource() == deleteButton) {
                Command c = new DeletePostCommand(p);
                c.execute();
                ((ProfilePage) Pages.Profile.getPage()).repaintFeed();
                viewHolder.repaint();
                viewHolder.revalidate();
            }
        }
    }
}
