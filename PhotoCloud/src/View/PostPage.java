package View;

import Controller.UIController;
import Controller.command.*;
import Image.ImageFactory;
import Model.nodes.Post;
import Model.nodes.User;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;

public class PostPage implements Page, ActionListener, ChangeListener {
    private JPanel mainPanel;
    private JSlider slider1;
    private JButton chooseButton;
    private JButton saveButton;
    private JLabel photoLabel;
    private JTextField descField;
    private JRadioButton edgeDetectionRadioButton;
    private JRadioButton sharpenRadioButton;
    private JRadioButton blurRadioButton;
    private JRadioButton grayScaleRadioButton;
    private JRadioButton brightenRadioButton;
    private JRadioButton contrastRadioButton;

    private ButtonGroup buttonGroup = new ButtonGroup();
    ImageIcon icon = null;


    public PostPage() {
        slider1.setValue(0);
        saveButton.addActionListener(this);
        chooseButton.addActionListener(this);
        buttonGroup.add(blurRadioButton);
        buttonGroup.add(grayScaleRadioButton);
        buttonGroup.add(sharpenRadioButton);
        buttonGroup.add(edgeDetectionRadioButton);
        buttonGroup.add(brightenRadioButton);
        buttonGroup.add(contrastRadioButton);
        buttonGroup.setSelected(blurRadioButton.getModel(), true);
        blurRadioButton.addChangeListener(this);
        grayScaleRadioButton.addChangeListener(this);
        sharpenRadioButton.addChangeListener(this);
        edgeDetectionRadioButton.addChangeListener(this);
        brightenRadioButton.addChangeListener(this);
        blurRadioButton.setVisible(false);
        sharpenRadioButton.setVisible(false);
        brightenRadioButton.setVisible(false);
        edgeDetectionRadioButton.setVisible(false);
        grayScaleRadioButton.setVisible(false);
        contrastRadioButton.setVisible(false);

        slider1.addChangeListener(this);


    }

    @Override
    public void onStart() {
        if (UIController.getUIController().getCurrentUser().tier == User.tiers.FreeTier) {
            blurRadioButton.setVisible(true);
            sharpenRadioButton.setVisible(true);
        }
        if (UIController.getUIController().getCurrentUser().tier == User.tiers.HobbyTier) {
            blurRadioButton.setVisible(true);
            sharpenRadioButton.setVisible(true);
            brightenRadioButton.setVisible(true);
            contrastRadioButton.setVisible(true);
        }
        if (UIController.getUIController().getCurrentUser().tier == User.tiers.ProTier) {
            blurRadioButton.setVisible(true);
            sharpenRadioButton.setVisible(true);
            brightenRadioButton.setVisible(true);
            edgeDetectionRadioButton.setVisible(true);
            grayScaleRadioButton.setVisible(true);
            contrastRadioButton.setVisible(true);
        }
    }

    @Override
    public JPanel getPanel() {
        return mainPanel;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton pressedButton) {
            String pressedText = pressedButton.getText();
            if (pressedText == "Choose Photo") {
                ReturnCommand<ImageIcon> c = new ChoosePhotoCommand();
                icon = c.executeWithReturn();
                photoLabel.setIcon(icon);
            }
            if (pressedText == "Save") {
                System.out.println("Save clicked");
                if (icon == null) {
                    Command warning = new WarningCommand("You have not selected a photo!");
                    warning.execute();
                    return;
                }

                Image image = ((ImageIcon) photoLabel.getIcon()).getImage();
                String description = descField.getText();
                LocalDateTime localDate = LocalDateTime.now();
                Post post = new Post(UIController.getUIController().getCurrentUser(), image, description, localDate);
                Command c = new AddPostCommand(post);
                c.execute();

            }

        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        chooseButton = new JButton();
        chooseButton.setText("Choose Photo");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(chooseButton, gbc);
        slider1 = new JSlider();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(slider1, gbc);
        photoLabel = new JLabel();
        photoLabel.setForeground(new Color(-8422786));
        photoLabel.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(photoLabel, gbc);
        edgeDetectionRadioButton = new JRadioButton();
        edgeDetectionRadioButton.setText("edgeDetection");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(edgeDetectionRadioButton, gbc);
        sharpenRadioButton = new JRadioButton();
        sharpenRadioButton.setText("Sharpen");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(sharpenRadioButton, gbc);
        blurRadioButton = new JRadioButton();
        blurRadioButton.setText("blur");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(blurRadioButton, gbc);
        contrastRadioButton = new JRadioButton();
        contrastRadioButton.setText("contrast");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(contrastRadioButton, gbc);
        brightenRadioButton = new JRadioButton();
        brightenRadioButton.setText("Brighten");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(brightenRadioButton, gbc);
        grayScaleRadioButton = new JRadioButton();
        grayScaleRadioButton.setText("grayScale");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(grayScaleRadioButton, gbc);
        saveButton = new JButton();
        saveButton.setText("Save");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(saveButton, gbc);
        descField = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(descField, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Description");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        mainPanel.add(label1, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    @Override
    public void stateChanged(ChangeEvent e) {

        if (e.getSource() instanceof JRadioButton) {
            if (icon != null) photoLabel.setIcon(icon);
            slider1.setValue(0);
        }

        if (e.getSource() instanceof JSlider slider) {
            //JRadioButton selectedButton = (JRadioButton) buttonGroup.getSelection();
            int value = slider.getValue();

            System.out.println(value);
            if (value == 0) {
                photoLabel.setIcon(icon);
                return;
            }
            ReturnCommand<ImageIcon> c = null;
            //ReturnCommand<ImageIcon> c = new BlurCommand(slider.getValue(), icon.getImage());


            if (blurRadioButton.isSelected()) {
                c = new EffectCommand(icon.getImage(), ImageFactory.Effects.BoxBlur, value);
            }
            if (sharpenRadioButton.isSelected()) {
                c = new EffectCommand(icon.getImage(), ImageFactory.Effects.Sharpen, value);
            }
            if (grayScaleRadioButton.isSelected()) {
                c = new EffectCommand(icon.getImage(), ImageFactory.Effects.GrayScale, value);
            }
            if (edgeDetectionRadioButton.isSelected()) {
                c = new EffectCommand(icon.getImage(), ImageFactory.Effects.EdgeDetection, value);
            }
            if (brightenRadioButton.isSelected()) {
                c = new EffectCommand(icon.getImage(), ImageFactory.Effects.Brightness, value);
            }
            if (contrastRadioButton.isSelected()) {
                c = new EffectCommand(icon.getImage(), ImageFactory.Effects.Contrast, value);
            }
            ImageIcon i = c.executeWithReturn();
            photoLabel.setIcon(i);
        }
    }

    @Override
    public void onExit() {
        photoLabel.setIcon(null);
        icon = null;
        descField.setText("");
        blurRadioButton.setVisible(false);
        sharpenRadioButton.setVisible(false);
        brightenRadioButton.setVisible(false);
        edgeDetectionRadioButton.setVisible(false);
        grayScaleRadioButton.setVisible(false);
        contrastRadioButton.setVisible(false);
    }
}
